from enum import IntEnum

class Align(IntEnum):
    AUTO = 0
    FLEX_START = 1
    CENTER = 2
    FLEX_END = 3
    STRETCH = 4
    BASELINE = 5
    SPACE_BETWEEN = 6
    SPACE_AROUND = 7
    SPACE_EVENLY = 8

class Direction(IntEnum):
    INHERIT = 0
    LTR = 1
    RTL = 2

class Display(IntEnum):
    FLEX = 0
    NONE = 1

class Edge(IntEnum):
    LEFT = 0
    TOP = 1
    RIGHT = 2
    BOTTOM = 3
    START = 4
    END = 5
    HORIZONTAL = 6
    VERTICAL = 7
    ALL = 8

class FlexDirection(IntEnum):
    COLUMN = 0
    COLUMN_REVERSE = 1
    ROW = 2
    ROW_REVERSE = 3

class Gutter(IntEnum):
    COLUMN = 0
    ROW = 1
    ALL = 2

class Justify(IntEnum):
    FLEX_START = 0
    CENTER = 1
    FLEX_END = 2
    SPACE_BETWEEN = 3
    SPACE_AROUND = 4
    SPACE_EVENLY = 5

class Overflow(IntEnum):
    VISIBLE = 0
    HIDDEN = 1
    SCROLL = 2

class PositionType(IntEnum):
    STATIC = 0
    RELATIVE = 1
    ABSOLUTE = 2

class Unit(IntEnum):
    UNDEFINED = 0
    POINT = 1
    PERCENT = 2
    AUTO = 3

class Wrap(IntEnum):
    NO_WRAP = 0
    WRAP = 1
    WRAP_REVERSE = 2

class Config:
    def __init__(self) -> None: ...
    @property
    def use_web_defaults(self) -> bool: ...
    @use_web_defaults.setter
    def use_web_defaults(self, enabled: bool) -> None: ...
    @property
    def point_scale_factor(self) -> float: ...
    @point_scale_factor.setter
    def point_scale_factor(self, pixels_in_point: float) -> None: ...

class Layout:
    def __init__(self) -> None: ...
    @property
    def left(self) -> float: ...
    @property
    def top(self) -> float: ...
    @property
    def right(self) -> float: ...
    @property
    def bottom(self) -> float: ...
    @property
    def width(self) -> float: ...
    @property
    def height(self) -> float: ...
    @property
    def direction(self) -> Direction: ...
    @property
    def had_overflow(self) -> bool: ...
    def margin(self, edge: Edge) -> float: ...
    def border(self, edge: Edge) -> float: ...
    def padding(self, edge: Edge) -> float: ...

class Node:
    def __init__(self, config: Config | None = None) -> None: ...
    def reset(self) -> None: ...
    def calculate_layout(
        self, available_width: int, available_height: int, owner_direction: Direction
    ) -> None: ...
    @property
    def has_new_layout(self) -> bool: ...
    @has_new_layout.setter
    def has_new_layout(self, has_new_layout: bool) -> None: ...
    def is_dirty(self) -> bool: ...
    def mark_dirty(self) -> None: ...
    def remove_child(self, child: Node) -> None: ...
    def __getitem__(self, index: int) -> Node | None: ...
    def __setitem__(self, index: int, child: Node) -> None: ...
    def __delitem__(self, child: Node) -> None: ...
    def __len__(self) -> int: ...
    def clear(self) -> None: ...
    @property
    def parent(self) -> Node | None: ...
    @property
    def is_reference_baseline(self) -> bool: ...
    @is_reference_baseline.setter
    def is_reference_baseline(self, is_reference_baseline: bool) -> None: ...
    @property
    def always_forms_containing_block(self) -> bool: ...
    @always_forms_containing_block.setter
    def always_forms_containing_block(
        self, always_forms_containing_block: bool
    ) -> None: ...
    @property
    def layout(self) -> Layout: ...
    def copy_style(self, dst: Node) -> None: ...
    @property
    def direction(self) -> Direction: ...
    @direction.setter
    def direction(self, direction: Direction) -> None: ...
    @property
    def flex_direction(self) -> FlexDirection: ...
    @flex_direction.setter
    def flex_direction(self, flex_direction: FlexDirection) -> None: ...
    @property
    def justify_content(self) -> Justify: ...
    @justify_content.setter
    def justify_content(self, justify_content: Justify) -> None: ...
    @property
    def align_content(self) -> Align: ...
    @align_content.setter
    def align_content(self, align_content: Align) -> None: ...
    @property
    def align_items(self) -> Align: ...
    @align_items.setter
    def align_items(self, align_items: Align) -> None: ...
    @property
    def align_self(self) -> Align: ...
    @align_self.setter
    def align_self(self, align_self: Align) -> None: ...
    @property
    def position_type(self) -> PositionType: ...
    @position_type.setter
    def position_type(self, position_type: PositionType) -> None: ...
    @property
    def flex_wrap(self) -> Wrap: ...
    @flex_wrap.setter
    def flex_wrap(self, flex_wrap: Wrap) -> None: ...
    @property
    def overflow(self) -> Overflow: ...
    @overflow.setter
    def overflow(self, overflow: Overflow) -> None: ...
    @property
    def display(self) -> Display: ...
    @display.setter
    def display(self, display: Display) -> None: ...
    @property
    def flex(self) -> float: ...
    @flex.setter
    def flex(self, flex: float) -> None: ...
    @property
    def flex_grow(self) -> float: ...
    @flex_grow.setter
    def flex_grow(self, flex_grow: float) -> None: ...
    @property
    def flex_shrink(self) -> float: ...
    @flex_shrink.setter
    def flex_shrink(self, flex_shrink: float) -> None: ...
    @property
    def flex_basis(self) -> tuple[float, Unit]: ...
    @flex_basis.setter
    def flex_basis(self, flex_basis: float) -> None: ...
    def set_flex_basis_percent(self, flex_basis: float) -> None: ...
    def set_flex_basis_auto(self) -> None: ...
    def position(self, edge: Edge) -> tuple[float, Unit]: ...
    def set_position(self, edge: Edge, position: float) -> None: ...
    def set_position_percent(self, edge: Edge, position: float) -> None: ...
    def margin(self, edge: Edge) -> tuple[float, Unit]: ...
    def set_margin(self, edge: Edge, margin: float) -> None: ...
    def set_margin_percent(self, edge: Edge, margin: float) -> None: ...
    def set_margin_auto(self, edge: Edge) -> None: ...
    def padding(self, edge: Edge) -> tuple[float, Unit]: ...
    def set_padding(self, edge: Edge, padding: float) -> None: ...
    def set_padding_percent(self, edge: Edge, padding: float) -> None: ...
    def border(self, edge: Edge) -> float: ...
    def set_border(self, edge: Edge, border: float) -> None: ...
    def gap(self, gutter: Gutter) -> float: ...
    def set_gap(self, gutter: Gutter, gap_length: float) -> None: ...
    @property
    def width(self) -> tuple[float, Unit]: ...
    @width.setter
    def width(self, width: float) -> None: ...
    def set_width_percent(self, width: float) -> None: ...
    def set_width_auto(self) -> None: ...
    @property
    def height(self) -> tuple[float, Unit]: ...
    @height.setter
    def height(self, height: float) -> None: ...
    def set_height_percent(self, height: float) -> None: ...
    def set_height_auto(self) -> None: ...
    @property
    def min_width(self) -> tuple[float, Unit]: ...
    @min_width.setter
    def min_width(self, min_width: float) -> None: ...
    def set_min_width_percent(self, min_width: float) -> None: ...
    @property
    def min_height(self) -> tuple[float, Unit]: ...
    @min_height.setter
    def min_height(self, min_height: float) -> None: ...
    def set_min_height_percent(self, min_height: float) -> None: ...
    @property
    def max_width(self) -> tuple[float, Unit]: ...
    @max_width.setter
    def max_width(self, max_width: float) -> None: ...
    def set_max_width_percent(self, max_width: float) -> None: ...
    @property
    def max_height(self) -> tuple[float, Unit]: ...
    @max_height.setter
    def max_height(self, max_height: float) -> None: ...
    def set_max_height_percent(self, max_height: float) -> None: ...
    @property
    def aspect_ratio(self) -> float: ...
    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio: float) -> None: ...
